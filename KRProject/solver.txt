
%Fluents

%%static
node(X,Y):-init(object(node,_),value(at,pair(X,Y))).
highway(X,Y):-init(object(highway,_),value(at,pair(X,Y))).
pickingStation(N,X,Y):-init(object(pickingStation,N),value(at,pair(X,Y))).
orderLoc(N,PID):-init(object(order,N),value(pickingStation,PID)).

%%temporal
robot(N,X,Y,0):-init(object(robot,N),value(at,pair(X,Y))).
shelf(N,X,Y,0):-init(object(shelf,N),value(at,pair(X,Y))).
product(N,SID,UNITS,0):-init(object(product,N),value(on,pair(SID,UNITS))).
order(N,PID,UID,UNITS,0):-init(object(order,N),value(line,pair(UID,UNITS))),orderLoc(N,PID).

%%Robot is in a state of lifting
lifting(N,none,0):-robotId(N).

%helpers
robotId(N):-robot(N,_,_,0).
shelfId(N):-shelf(N,_,_,0).
productId(N,S):-product(N,S,_,0).
orderId(N,P,U):-order(N,P,U,_,0).
pickingStationId(N):-pickingStation(N,_,_).

onPickingStation(RID,PID,T):-robot(RID,X,Y,T),pickingStation(PID,X,Y).

% Inertia
{robot(N,X,Y,T+1)}:-robot(N,X,Y,T),T<t.
{shelf(N,X,Y,T+1)}:-shelf(N,X,Y,T),T<t.
{lifting(N,S,T+1)}:-lifting(N,S,T),T<t.
{product(N,S,UNITS,T+1)}:-product(N,S,UNITS,T),T<t.
{order(N,P,U,UNITS,T+1)}:-order(N,P,U,UNITS,T),T<t.

% Uniqueness and existence
:- not 1{robot(N,X,Y,T)}1, robotId(N), T=1..t.
:- not 1{shelf(N,X,Y,T)}1, shelfId(N), T=1..t.
:- not 1{lifting(N,S,T)}1, robotId(N), T=1..t.
:- not 1{product(N,S,UNITS,T)}1, productId(N,S), T=1..t.
:- not 1{order(N,P,U,UNITS,T)}1, orderId(N,P,U) , T=1..t.

% Actions
{move(N,(left;right;up;down),T)}1:-robotId(N),T=0..t-1.
{pickup(N,T)}:-robotId(N),T=0..t-1.
{putdown(N,T)}:-robotId(N),T=0..t-1.
{deliver(N,T)}:-robotId(N),T=0..t-1.

% Only 1 Action
:-2{move(N,_,T);pickup(N,T);putdown(N,T);deliver(N,T)},robotId(N),T=0..t-1.

%Effects of Actions
%%Moving
robot(N,X-1,Y,T+1):-move(N,left,T),robot(N,X,Y,T).
robot(N,X+1,Y,T+1):-move(N,right,T),robot(N,X,Y,T).
robot(N,X,Y-1,T+1):-move(N,up,T),robot(N,X,Y,T).
robot(N,X,Y+1,T+1):-move(N,down,T),robot(N,X,Y,T).

%%Move shelf
shelf(SID,X-1,Y,T+1):-move(RID,left,T),robot(RID,X,Y,T),lifting(RID,SID,T),SID!=none.
shelf(SID,X+1,Y,T+1):-move(RID,right,T),robot(RID,X,Y,T),lifting(RID,SID,T),SID!=none.
shelf(SID,X,Y-1,T+1):-move(RID,up,T),robot(RID,X,Y,T),lifting(RID,SID,T),SID!=none.
shelf(SID,X,Y+1,T+1):-move(RID,down,T),robot(RID,X,Y,T),lifting(RID,SID,T),SID!=none.

%%pickup
lifting(RID,SID,T+1):-pickup(RID,T),robot(RID,X,Y,T),shelf(SID,X,Y,T).

%%putdown
lifting(RID,none,T+1):-putdown(RID,T).

%%deliver

%This got kinda ugly and where i think the bug is, but what it does is check if all the conditions for a delivery are set at the same time
%If it is the it creates a "delivered" event, deliver events then trigger reducing product counts on orders and shelves.

delivered(RID,UID,SID,UUNITS,OID,PID,OUNITS,T):-deliver(RID,T), lifting(RID,SID,T), onPickingStation(RID,PID,T), product(UID,SID,UUNITS,T), order(OID,PID,UID,OUNITS,T).

product(UID,SID,UUNITS-OUNITS,T+1):-delivered(RID,UID,SID,UUNITS,OID,PID,OUNITS,T),UUNITS>=OUNITS.
order(OID,PID,UID,0,T+1):-delivered(RID,UID,SID,UUNITS,OID,PID,OUNITS,T),UUNITS>=OUNITS.
product(UID,SID,0,T+1):-delivered(RID,UID,SID,UUNITS,OID,PID,OUNITS,T),UUNITS<OUNITS.
order(OID,PID,UID,OUNITS-UUNITS,T+1):-delivered(RID,UID,SID,UUNITS,OID,PID,OUNITS,T),UUNITS<OUNITS.

%Constraints
:-deliver(N,T), not onPickingStation(N,_,T).

%% Cant pickup if robot isnt under shelf
:-pickup(N,T), robot(N,X,Y,T), not {shelf(_,X,Y,T)}=1.

%% Cant pickup if lifting
:-pickup(RID,T), robotId(RID), lifting(RID,SID,T), SID!=none.

%% Cant putdown unless lifting
:-putdown(N,T), lifting(N,SID,T), SID=none.

%% Shelves cant crash
:-shelf(N1,X,Y,T),shelf(N2,X,Y,T),N1!=N2.

%% Robots cant crash
:-robot(N1,X,Y,T),robot(N2,X,Y,T),N1!=N2.

%% Robots cant swap
:-robot(N1,X,Y,T+1),robot(N2,X,Y,T),robot(N1,X2,Y2,T),robot(N2,X2,Y2,T+1),N1!=N2.

%% robots cant go out of bounds
:-robot(_,X,Y,_),not node(X,Y).

%% Shelves cant stop on highways
:-shelf(N,X,Y,T),highway(X,Y),not lifting(_,N,T).


% Check for completeness

%% Order becomes complete when the units goes to zero in a time step
orderComplete(N,PID,UID,T):-order(N,PID,UID,0,T),order(N,PID,UID,UNITS,T-1),UNITS>0.
non_max(T1) :- orderComplete(N1,P1,U1,T1),orderComplete(N2,P2,U2,T2),T2>T1.
maxTime(T) :-orderComplete(N,P,U,T),not non_max(T).

%% filter all models that have an order that is not complete
:- order(N,PID,UID,_,_), not orderComplete(N,PID,UID,_).

%% minimize the maxTime
#minimize {T:maxTime(T)}.

%Generate output symbols

occurs(object(robot,RID),move(-1,0),T+1):-move(RID,left,T).
occurs(object(robot,RID),move(1,0),T+1):-move(RID,right,T).
occurs(object(robot,RID),move(0,-1),T+1):-move(RID,up,T).
occurs(object(robot,RID),move(-1,0),T+1):-move(RID,down,T).
occurs(object(robot,RID),pickup,T+1):-pickup(RID,T).
occurs(object(robot,RID),putdown,T+1):-putdown(RID,T).
occurs(object(robot,RID),deliver(OID,UID,UUNITS),T+1):-delivered(RID,UID,SID,UUNITS,OID,PID,OUNITS,T).

%% Debugging shows
%#show lifting/3.
%#show robot/4.
%#show shelf/4.
%#show move/3.
%#show pickup/2.
%#show putdown/2.
%#show deliver/2.
%#show product/4.
%#show order/5.
%#show delivered/8.
%#show orderComplete/4.
%#show maxTime/1.


%Output show
#show occurs/3.

